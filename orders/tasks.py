import time

from celery import shared_task
from django.core.exceptions import ValidationError
from django.db import transaction

from goods.models import Products
from orders.models import Order


@shared_task(bind=True,
             max_retries=3,
             default_retry_delay=10,      # –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
             acks_late=True,              # –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å –∑–∞–¥–∞—á—É —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
             reject_on_worker_lost=True   # –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –∑–∞–¥–∞—á—É –ø—Ä–∏ —Å–±–æ–µ
             )
def add_to_queue(self,order_id, prod):
    print("üéØ –ó–∞–¥–∞—á–∞ Celery –∑–∞–ø—É—â–µ–Ω–∞")
    time.sleep(5)
    try:
        with transaction.atomic():
            products_to_update = []
            order = Order.objects.get(id=order_id)
            order.status = '–í–∞—à –∑–∞–∫–∞–∑ –æ–¥–æ–±—Ä–µ–Ω —á–µ–ª–æ–≤–µ—á–∏—à–∫–∞'
            order.save()
            for product_id_and_q in prod:
                product_id, product_quantity = product_id_and_q
                product = Products.objects.get(id=product_id)
                if product_quantity > product.quantity:
                    raise ValidationError(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ {product.name} –Ω–∞ —Å–∫–ª–∞–¥–µ.")
                product.quantity -= product_quantity  # –æ—Ç–Ω–∏–º–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
                products_to_update.append(product)  # –ø–æ–º–µ—â–∞–µ–º –≤ —Å–ø–∏—Å–æ–∫ –ø–æ –æ–¥–Ω–æ–º—É –ø—Ä–æ–¥—É–∫—Ç—ã
            Products.objects.bulk_update(products_to_update, ['quantity'])  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–¥ —Å—Ä–∞–∑—É –≤—Å—ë —á—Ç–æ–±—ã –Ω–µ —Ö–æ–¥–∏—Ç—å –ø–æ 100 —Ä–∞–∑
            return 'Success'

    except ValidationError as ex:
        try:
            self.retry(exc=ex)
            raise '–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è'
        except ValidationError as e:
            order.status = '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏'
            order.save()
            raise e
